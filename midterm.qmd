---
title: "Data Science 1 - Midterm Project"
author: "Adam Haertter & Brennan Mulligan"
format: pdf
---

# The Assignment

## Midterm - Open Case Studies Exploration

### Open Case Studies

The Open Case Studies (OCS) project is an educational resource of experiential guides that demonstrate how to effectively derive knowledge from data in real-world challenges. This project is the result of work of a team of researchers from Johns Hopkins University and it's Principal Investigator Dr. Stephanie Hicks. The project contains 12 different case studies. You can check out the projects and case studies here: https://www.opencasestudies.org/.

### Midterm Tasks

For the midterm, you are going to you are going to choose a case study that you want to work with (from the approved list that is listed) below and complete a number of tasks. Specifically,

1.  You need to choose a case study to work with. Here are the list of approved case studies:

-   School Shootings in the United States
-   Opioids in United States
-   Mental Health of American Youth
-   Exploring CO2 emissions across time
-   Exploring global patterns of dietary behaviors associated with health risk

2.  Complete the case study. The studies are really well documented and includes all of the requisite code you will need. You will already know some of the skills from class, but each study contains some new skills. Write down your work in a Quarto document. Make sure to answer all of the questions they ask throughout. The answers are included, but try to answer the questions before you look at the key.

3.  Answer the suggested homework question(s) in the same Quarto document you did #2 in.

4.  Come up with your own question and answer it. Your question should be a "big picture" question, not one that can be answered with a single plot or summary table.

------------------------------------------------------------------------

# The Process & Analysis

> (Our answers start here)

## Choosing an Open Case Study

For our open case study, we have chosen to analyze the [Mental Health of American Youth](https://www.opencasestudies.org/ocs-bp-youth-mental-health/), chosen from the provided list of [Open Case Studies](https://www.opencasestudies.org/#searchtab).


The main questions the case study intends to follow are:
1. How have depression rates in American youth changed since 2004, according to the NSDUH data? How have rates differed between different youth subgroups (age, gender, ethnicity)?
2. Do mental health services appear to be reaching more youths? Again, how have rates differed between different youth subgroups (age, gender, ethnicity)?

```{r lib}
#| message: false 
#| echo: false

library(here)
library(rvest)
library(dplyr)
library(magrittr)
library(stringr)
library(tidyr)
library(tibble)
library(purrr)
library(ggplot2)
library(directlabels)
library(scales)
library(forcats)
library(ggthemes)
library(rstatix)
library(cowplot)
library(OCSdata)

```

## Following the Case Study

### Data Import

Following the case study, data should be obtained by scraping the web. Specifically, we need to scrape the [NSDUH survey](https://www.samhsa.gov/data/sites/default/files/cbhsq-reports/NSDUHDetailedTabs2018R2/NSDUHDetTabsSect11pe2018.htm) site.

```{r}
# Data Import
table11.1a <- read_html("https://www.samhsa.gov/data/sites/default/files/cbhsq-reports/NSDUHDetailedTabs2018R2/NSDUHDetTabsSect11pe2018.htm") %>%
  html_nodes(xpath = "/html/body/div[4]/div[1]/table") %>%
  html_table() %>%
  .[[1]]

# Defining a scraper function
scraper <- function(XPATH) {
  NSDUH_url <- "https://www.opencasestudies.org/ocs-bp-youth-mental-health/data/raw/samhsa.gov_2020_tables.htm"
  table <- NSDUH_url %>%
    read_html() %>%
    html_nodes(xpath = XPATH) %>%
    html_table()
  output <- table[[1]]
  output
}

# Scraping the rest of the tables
table11.1b <- scraper(XPATH = "/html/body/div[4]/div[2]/table")
table11.2a <- scraper(XPATH = '/html/body/div[4]/div[3]/table')
table11.2b <- scraper(XPATH = '/html/body/div[4]/div[4]/table')
table11.3a <- scraper(XPATH = '/html/body/div[4]/div[5]/table')
table11.3b <- scraper(XPATH = '/html/body/div[4]/div[6]/table')
table11.4a <- scraper(XPATH = '/html/body/div[4]/div[7]/table')
table11.4b <- scraper(XPATH = '/html/body/div[4]/div[8]/table')

# Saving the data locally
save(table11.1a, table11.1b, table11.2a, table11.2b, 
     table11.3a, table11.3b, table11.4a, table11.4b, 
     file = here("data", "imported", "imported_data.rda"))

```

### Data Wrangling

```{r}
# Data Wrangling
load(file = here::here("data", "imported", "imported_data.rda"))

# Separating the legend
legend <- table11.1a %>%
  as_tibble() %>%
  select(`2004`) %>%
  tail(n = 1)

table11.1a %<>%
  as_tibble() %>%
  slice(1:(n()-1))

#slice_head(table11.1a, n = (length(pull(table11.1a, `2002`))))
#pull(legend, `2004`)

# Unifying the NA values based on the legend
table11.1a %<>%
   mutate_all(~na_if(., "nc")) %>%
  mutate_all(~na_if(., "--")) %>%
  mutate_all(~na_if(., "")) %>%
  mutate_all(~na_if(., "*"))

#head(table11.1a)
#colnames(table11.1a)

# Cleaning up the row names
table11.1a %<>%
  rename(MHS_setting = `Setting Where Mental Health ServiceWas Received`)

#head(table11.1a)
#table11.1a %>% pull(MHS_setting)

table11.1a %<>%
  mutate(MHS_setting = 
           str_remove_all(string = MHS_setting,
                          pattern = "[:digit:]|\r\n|[:punct:]|")) %>%
  mutate(MHS_setting = 
           str_replace_all(string = MHS_setting,
                           pattern = "[:blank:]{1,}",
                           replacement = " "))

# Cleaning up numerical values
table11.1a %<>%
  mutate(across(.cols = -MHS_setting,
                str_remove_all,
                "a|,")) %>%
  mutate(across(.cols = -MHS_setting,
                as.numeric))

# Type, subtype, and short labels
table11.1a %<>%
  mutate(type = c(rep("Specialty", 9), 
                  rep("Nonspecialty", 11))) %>%
  mutate(subtype = c("Specialty_total", 
                     rep("Outpatient", 5), 
                     rep("Inpatient", 3), 
                     "Nonspecialty_total", 
                     rep("Education", 3), 
                     rep("General_medicine", 2),
                     rep("Juvenile_Justice", 2), 
                     rep("Child_Welfare", 2), 
                     "combination")) %>%
  mutate(short_label = c("Specialty total", 
                         "Outpatient total", 
                         "Therapist", 
                         "Clinic", 
                         "Day program",
                         "In-home Therapist", 
                         "Inpatient total", 
                         "Hospital", 
                         "Residential Center",
                         "Nonspecialty total", 
                         "School total", 
                         "School Therapist", 
                         "School Program", 
                         "General Medicine",
                         "Family Dr",
                         "Justice System",
                         "Justice System",
                         "Welfare", 
                         "Fostercare", 
                         "Specialty Combination"))

# Filtering out empty rows
table11.1a %<>%
  filter(MHS_setting != "General_Medicine") %>%
  filter(MHS_setting != "Juvenile_Justice") %>%
  filter(MHS_setting != "Child_Welfare")
  
# Pivoting data
table11.1a %<>%
  tidyr::pivot_longer(cols = contains("20"), 
                      names_to = "Year",
                      values_to = "Number") %>%
  mutate(Year = as.numeric(Year))

# Defining a similar summary function for 
# This just requires retracing the same steps as above
data_prep_settings <- function(TABLE, new_col, pivot_col){
  dplyr::as_tibble(TABLE) %>%
    slice(1:(n() - 1)) %>%
# make "nc" values NA etc. CHANGE
    na_if("nc") %>%
    na_if("--") %>%
    na_if("") %>%
    na_if("*") %>% 
# rename the first column (names(.)[1]) to be what was specified with the new_col argument
    rename({{new_col}} := names(.)[1]) %>%
# remove the numbers and punctuation marks and carriage returns (\r) and new lines (\n) from the first column
    mutate({{new_col}} := 
        str_remove_all(string = pull(., {{new_col}}), 
                        pattern = "[:digit:]|\r\n|[:punct:]|")) %>%
# replace white spaces with a single space
    mutate({{new_col}} := 
        str_replace_all(string =pull(., {{new_col}}),
                         pattern = "[:blank:]{1,}", 
                         replacement = " ")) %>%
# remove "a" and , from the values for the columns that are not the first column (called new_col)
    mutate(dplyr::across(.cols = -{{new_col}},
                       stringr::str_remove_all, "a|,")) %>%
# make these columns numeric  (all the columns but the first column)
    mutate(across(-{{new_col}}, as.numeric)) %>%
# make a new variable called type with 9 values that are Specialty followed by 11 values of Nonspecialty
    mutate(type = c(rep("Specialty", 9), rep("Nonspecialty", 11))) %>%
# make a new variable called subtype with the following values repeated various times
    mutate(subtype = c("Specialty_total",
                       rep("Outpatient", 5),
                       rep("Inpatient", 3),
                       "Nonspecialty_total",
                       rep("Education", 3),
                       rep("General_medicine", 2),
                       rep("Juvenile_Justice", 2),
                       rep("Child_Welfare", 2),
                       "combination")) %>% 
# make a new variable called short_label to use as labels for plots for the data
    mutate(short_label = c("Specialty total", "Outpatient total",  
                           "Therapist", "Clinic", "Day program", 
                           "In-home Therapist", "Inpatient total",
                           "Hospital", "Residential Center",
                           "Nonspecialty total", "School total", 
                           "School Therapist", "School Program", 
                           "General Medicine", "Family Dr", 
                           "Justice System", "Justice System", 
                           "Welfare", "Fostercare", 
                           "Specialty Combination")) %>%
# remove rows were all the values are NA - 
# the number of `NA` values for a row should be less than the number of columns that could have `NA` values
  filter(rowSums(is.na(select(., is.numeric))) <
           length(select(., is.numeric))) %>%
# make the table into long format so that the year columns are collapsed together 
# the new value column is called what was specified with the "pivot_col" argument
  pivot_longer(cols = contains("20"),
               names_to = "Year", 
               values_to = pivot_col)%>%
# make the new "Year" variable numeric
  mutate(Year = as.numeric(Year))
}

```

### Data Visualization

```{r}
# Data Visualization

```

### Data Analysis

```{r}
# Data Analysis

```

### Summary

```{r}
# Summary

```


## Homework Questions

```{r}
# Suggested HW Questions

```

## Our Own Question

For our own question, we would like to examine **\[Write about this more\]**

```{r}
# Our Own Question

```
